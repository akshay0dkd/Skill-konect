import React, { useState, useEffect } from 'react';
import { collection, getDocs, query, where } from 'firebase/firestore';
import { db } from '../firebase';
import { useSelector } from 'react-redux';
import { RootState } from '../redux/store';
import { createConversation, sendMessage } from '../services/api';

interface Skill {
  id: string;
  name: string;
  userId: string;
  userName: string;
  userAvatar: string;
}

const Skills: React.FC = () => {
  const { user: currentUser } = useSelector((state: RootState) => state.auth);
  const [skills, setSkills] = useState<Skill[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [selectedSkill, setSelectedSkill] = useState<Skill | null>(null);

  useEffect(() => {
    const fetchSkills = async () => {
      try {
        const skillsCollection = collection(db, 'skills');
        const skillsSnapshot = await getDocs(skillsCollection);
        const skillsList = skillsSnapshot.docs.map(doc => ({ ...doc.data(), id: doc.id } as Skill));
        setSkills(skillsList);
      } catch (err) {
        console.error("Error fetching skills: ", err);
        setError("Failed to load skills.");
      } finally {
        setLoading(false);
      }
    };

    fetchSkills();
  }, []);

  const handleSendRequest = async (skill: Skill) => {
    if (!currentUser) return;

    try {
      // Create a conversation between the two users
      const newConversation = await createConversation(currentUser.uid, skill.userId);

      if (newConversation) {
        // Send an initial message
        const message = `Hi ${skill.userName}, I'd like to learn more about ${skill.name}.`;
        await sendMessage(newConversation.id, currentUser.uid, message);

        // You might want to navigate to the messages page or show a confirmation
        alert("Request sent!");
        setSelectedSkill(null);
      }

    } catch (err) {
      console.error("Error sending request: ", err);
      setError("Failed to send request.");
    }
  };

  const filteredSkills = skills.filter(skill => 
    skill.name.toLowerCase().includes(searchTerm.toLowerCase()) && 
    skill.userId !== currentUser?.uid
  );

  if (loading) {
    return <div className="flex h-full items-center justify-center">Loading...</div>;
  }

  if (error) {
    return <div className="flex h-full items-center justify-center text-red-500">{error}</div>;
  }

  return (
    <div className="p-8">
      <h1 className="text-3xl font-bold mb-6">Explore Skills</h1>
      <div className="mb-6">
        <input 
          type="text"
          placeholder="Search for skills..."
          className="w-full p-3 border rounded-lg"
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {filteredSkills.map(skill => (
          <div key={skill.id} className="bg-white p-6 rounded-lg shadow-md flex flex-col justify-between">
            <div>
              <h2 className="text-2xl font-bold mb-2">{skill.name}</h2>
              <div className="flex items-center">
                <img src={skill.userAvatar || 'https://via.placeholder.com/150'} alt={skill.userName} className="w-10 h-10 rounded-full mr-4" />
                <p className="text-gray-700">{skill.userName}</p>
              </div>
            </div>
            <button 
              onClick={() => setSelectedSkill(skill)} 
              className="mt-4 bg-primary text-white font-bold py-2 px-4 rounded-full w-full"
            >
              Request to Learn
            </button>
          </div>
        ))}
      </div>

      {selectedSkill && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center">
          <div className="bg-white p-8 rounded-lg max-w-sm w-full">
            <h2 className="text-2xl font-bold mb-4">Send Request</h2>
            <p className="mb-6">You are about to send a request to <span className="font-semibold">{selectedSkill.userName}</span> to learn about <span className="font-semibold">{selectedSkill.name}</span>.</p>
            <div className="flex justify-end">
              <button 
                onClick={() => setSelectedSkill(null)} 
                className="mr-4 bg-gray-300 hover:bg-gray-400 text-gray-800 font-bold py-2 px-4 rounded-full"
              >
                Cancel
              </button>
              <button 
                onClick={() => handleSendRequest(selectedSkill)} 
                className="bg-primary hover:bg-indigo-700 text-white font-bold py-2 px-4 rounded-full"
              >
                Confirm
              </button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};

export default Skills;
